#!/bin/sh /etc/rc.common

START=59

lease_file=/var/dhcpd.leases
config_file=/etc/dhcpd.conf
pid_file=/var/run/dhcpd.pid

CONFIGFILE="/var/etc/dhcpd.conf"
static_host_num=0
config_replace=0

dhcp_calc() {
	local ip="$1"
	local res=0

	while [ -n "$ip" ]; do
		part="${ip%%.*}"
		res="$(($res * 256))"
		res="$(($res + $part))"
		[ "${ip%.*}" != "$ip" ] && ip="${ip#*.}" || ip=
	done
	echo "$res"
}

dhcpd_add() {
	local cfg="$1"
	config_get net "$cfg" interface
	[ -n "$net" ] || return 0

	config_get dhcpv4 "$cfg" dhcpv4
	[ "$dhcpv4" != "disabled" ] || return 0

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || networkid="$net"

	network_get_subnet subnet "$net" || return 0
	network_get_device ifname "$net" || return 0
	network_get_protocol proto "$net" || return 0
	network_get_ipaddr ipaddr_gateway "$net" || return 0

	# Do not support non-static interfaces for now
	[ static = "$proto" ] || return 0

	# Override interface netmask with dhcp config if applicable
	config_get netmask "$cfg" netmask "${subnet##*/}"

	config_get start "$cfg" start
	config_get limit "$cfg" limit
	config_get leasetime "$cfg" leasetime
	config_get domain "$cfg" domain
	config_get dns "$cfg" dns
	config_get ignore "$cfg" ignore

	leasetime="${leasetime:-12h}"
	start="$(dhcp_calc "${start:-100}")"
	limit="${limit:-150}"
	[ "$limit" -gt 0 ] && limit=$((limit-1))
	eval "$(ipcalc.sh "${subnet%%/*}" $netmask $start $limit)"
	
	echo "subnet ${NETWORK} netmask ${NETMASK} {" >> $CONFIGFILE
	echo "default-lease-time ${leasetime};" >> $CONFIGFILE
	echo "max-lease-time ${leasetime};" >> $CONFIGFILE
	echo "range ${START} ${END};" >> $CONFIGFILE
	echo "option routers ${ipaddr_gateway};" >> $CONFIGFILE
	
	
	if [ -n $dns ] && [ "$dns" != "" ];then
		echo "option domain-name-servers ${dns};" >> $CONFIGFILE
	else
		echo "option domain-name-servers ${ipaddr_gateway};" >> $CONFIGFILE
	fi	
	
	[ -n $domain ] && echo "option domain-name \"${domain}\";" >> $CONFIGFILE	
	if [ -n "$ignore" ] && [ "$ignore" == 1 ];then
		echo "deny unknown-clients;" >> $CONFIGFILE
	fi	
	echo "}" >> $CONFIGFILE
	
	config_replace=1	

}

append_dhcp_static_lease() {
	local ip
	local mac
	local hostname
	
	ip=$1
	mac=$2
	hostname=$3
	echo "lease $ip {" >> $lease_file
	echo "  ends never;" >> $lease_file
	echo "  tstp never;" >> $lease_file
	echo "  binding state active;" >> $lease_file
	echo "  next binding state free;" >> $lease_file
	echo "  hardware ethernet $mac;" >> $lease_file
	echo "  client-hostname \"$hostname\";" >> $lease_file
	echo "}" >> $lease_file
}

dhcpd_host_add()
{
	local ip
	local mac
	config_get ip $1 ip
	config_get mac $1 mac
	
	[ -z "$ip" ] && return 0 
	[ -z "$mac" ] && return 0
	let static_host_num=static_host_num+1
	
	echo "host static_$static_host_num {" >> $CONFIGFILE
	echo "hardware ethernet ${mac};" >> $CONFIGFILE
	echo "fixed-address ${ip};" >> $CONFIGFILE
	echo "}" >> $CONFIGFILE
	append_dhcp_static_lease "$ip" "$mac" "static_$static_host_num"
}

dhcpd_arp_host_add()
{
	local ip
	local mac
	config_get ip $1 ip
	config_get mac $1 mac
	config_get ifname $1 ifname
	
	[ -z "$ifname" ] && return 0
	query_lan=`echo "$ifname" |grep lan`
	[ -z "$query_lan" ] && return 0
	[ -z "$ip" ] && return 0
	[ -z "$mac" ] && return 0
	query_ip=`grep -w "$ip;" "$CONFIGFILE"`
	[ -n "$query_ip" ] && return 0
	let static_host_num=static_host_num+1

	echo "host static_$static_host_num {" >> $CONFIGFILE
	echo "hardware ethernet ${mac};" >> $CONFIGFILE
	echo "fixed-address ${ip};" >> $CONFIGFILE
	echo "}" >> $CONFIGFILE
	append_dhcp_static_lease "$ip" "$mac" "static_$static_host_num"
}

start() {
	if [ -f $lease_file ]; then
		[ -f  /usr/bin/dhcpd_lease_file ] && /usr/bin/dhcpd_lease_file
	else
		touch $lease_file
	fi
	touch $CONFIGFILE
	echo "authoritative;" > $CONFIGFILE
	echo "db-time-format local;" >> $CONFIGFILE
	include /lib/functions
	config_load dhcpd
	config_foreach dhcpd_add dhcpd

	config_load dhcp
	config_foreach dhcpd_host_add host
	
	arp_static_flag=`uci get common.arp_static 2>/dev/null`
	if [ -n "$arp_static_flag" ] && [ $arp_static_flag -eq 1 ];then
		config_load arp
		config_foreach dhcpd_arp_host_add rule
	fi
	
	[ $config_replace -eq 1 ] && cp $CONFIGFILE /etc/dhcpd.conf
	rm -f $CONFIGFILE

	/usr/sbin/dhcpd -q -cf $config_file -lf $lease_file -pf $pid_file $dhcp_ifs

	if [ $? -ne 0 ]; then
		return 1
	fi
}

stop() {
	if [ ! -e $pid_file ]; then
		return 1
	fi

	kill -9 `cat $pid_file`

	if [ $? -ne 0 ]; then
		return 1
	fi

	rm $pid_file
}
