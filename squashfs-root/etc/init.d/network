#!/bin/sh /etc/rc.common

START=20
STOP=90

USE_PROCD=1

. /lib/network_queue.sh

INTEL_MODE_FLAG="/tmp/sysinfo/intel_model"
WTPD_FLAG="/usr/bin/wtpd_udp"

#lantiq use
update_phy_port() {
    if [ `switch_cli GSW_PORT_LINK_CFG_GET nPortId=2 | grep eLink | awk '{print $2}'` == "0" ]; then
        switch_cli GSW_PORT_LINK_CFG_SET dev=0 nPortId=2 eLink=1
        #echo "--------------------------------------------------port=2" > /dev/console
    elif [ `switch_cli GSW_PORT_LINK_CFG_GET nPortId=3 | grep eLink | awk '{print $2}'` == "0" ]; then
        switch_cli GSW_PORT_LINK_CFG_SET dev=0 nPortId=3 eLink=1
        #echo "--------------------------------------------------port=3" > /dev/console
    elif [ `switch_cli GSW_PORT_LINK_CFG_GET nPortId=4 | grep eLink | awk '{print $2}'` == "0" ]; then
        switch_cli GSW_PORT_LINK_CFG_SET dev=0 nPortId=4 eLink=1
        #echo "--------------------------------------------------port=4" > /dev/console
    elif [ `switch_cli GSW_PORT_LINK_CFG_GET nPortId=5 | grep eLink | awk '{print $2}'` == "0" ]; then
        switch_cli GSW_PORT_LINK_CFG_SET dev=0 nPortId=5 eLink=1
        #echo "--------------------------------------------------port=5" > /dev/console
    else
        echo "---------------------------------------------------non port" > /dev/console
    fi
}

init_switch() {
	setup_switch() { return 0; }

	include /lib/network
	setup_switch
}

init_switch_vlan() {
	setup_switch_vlan() { return 0; }

	include /lib/network
	setup_switch_vlan
}

start_service() {
#	local wxenable=`uci get wireless.@wifi-iface[0].wxscan`
#	local ptenable=`uci get wireless.@wifi-iface[0].portal`
#	local faenable=`uci get wireless.@wifi-iface[0].fansauth`
#	local wan_ifcae=`uci get network.wan.ifname`
#	[ $wxenable = 1 -o $ptenable = 1 -o $faenable = 1 ] && {
#		[ x"$wan_ifcae" = "x"  -o x"$wan_ifcae" = "xwwan" ] || {
#			uci set wireless.@wifi-iface[0].network=guest
#			uci set network.guest.ifname=wlan0
#		}
#		[ x"$wan_ifcae" = "x"  -o x"$wan_ifcae" = "xwwan" ] && {
#			uci set wireless.@wifi-iface[0].network=lan
#			uci delete network.guest.ifname
#		}
#	}
#	
#	[ $wxenable = 1 -o $ptenable = 1 -o $faenable = 1 ] || {
#		uci set wireless.@wifi-iface[0].network=lan
#		uci delete network.guest.ifname
#	}

	init_switch
	[ -e /etc/config/vlan ] && {
		init_switch_vlan
	}

	netifd_pid=`pidof netifd`
	[ x"$netifd_pid" = "x" ] || {
		kill -9 $netifd_pid
	}

	procd_open_instance
	procd_set_param command /sbin/netifd
	procd_set_param respawn
	procd_set_param watch network.interface
	[ -e /proc/sys/kernel/core_pattern ] && {
		procd_set_param limits core="unlimited"
		echo '/tmp/%e.%p.%s.%t.core' > /proc/sys/kernel/core_pattern
	}
	procd_close_instance
}

reload_service() {
	init_switch
	ubus call network reload
    [ -e $INTEL_MODE_FLAG ] && update_phy_port
	/sbin/wifi reload_legacy
    [ -e $INTEL_MODE_FLAG ] && /etc/init.d/wireless restart
}

stop() {
	/sbin/wifi down
	procd_kill network ''

	netifd_pid=`pidof netifd`
	[ x"$netifd_pid" = "x" ] || {
		kill -9 $netifd_pid
	}
}

service_running() {
	ubus -t 30 wait_for network.interface
	/sbin/wifi reload_legacy
}

validate_atm_bridge_section()
{
	uci_validate_section network "atm-bridge" "${1}" \
		'unit:uinteger:0' \
		'vci:range(32, 65535):35' \
		'vpi:range(0, 255):8' \
		'atmdev:uinteger:0' \
		'encaps:or("llc", "vc"):llc' \
		'payload:or("bridged", "routed"):bridged'
}

validate_route_section()
{
	uci_validate_section network route "${1}" \
		'interface:string' \
		'target:cidr4' \
		'netmask:netmask4' \
		'gateway:ip4addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_route6_section()
{
	uci_validate_section network route6 "${1}" \
		'interface:string' \
		'target:cidr6' \
		'gateway:ip6addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_rule_section()
{
	uci_validate_section network rule "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr4' \
		'dest:cidr4' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_rule6_section()
{
	uci_validate_section network rule6 "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr6' \
		'dest:cidr6' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_switch_section()
{
	uci_validate_section network switch "${1}" \
		'name:string' \
		'enable:bool' \
		'enable_vlan:bool' \
		'reset:bool'
}

validate_switch_vlan()
{
	uci_validate_section network switch_vlan "${1}" \
		'device:string' \
		'vlan:uinteger' \
		'ports:list(ports)'
}

service_triggers()
{
	procd_add_reload_trigger network wireless

	procd_open_validate
	validate_atm_bridge_section
	validate_route_section
	validate_route6_section
	validate_rule_section
	validate_rule6_section
	validate_switch_section
	validate_switch_vlan
	procd_close_validate
}

restartall() {
	add_network_queque network_res_all
	[ ! -e $INTEL_MODE_FLAG ] && get_optimum_channel network
	[ -f /usr/sbin/mwanflushrule ] && /usr/sbin/mwanflushrule
	ifdown -a	
	[ -e $INTEL_MODE_FLAG ] && update_phy_port
	sleep 1
	trap '' TERM
	stop "$@"
	start "$@"
	sleep 5
	[ -e $INTEL_MODE_FLAG ] && /etc/init.d/wireless restart
	[ -f /etc/init.d/arp_set ] && /etc/init.d/arp_set restart
	[ -f /etc/init.d/wanmacclone ] && /etc/init.d/wanmacclone start
	[ -f /etc/init.d/wpptpaddroute ] && /etc/init.d/wpptpaddroute start 
	[ -f /etc/init.d/wl2tpaddroute ] && /etc/init.d/wl2tpaddroute start 
	[ -f /etc/init.d/dhcpd ] && rm -f /tmp/dhcpd.leases && rm -f /tmp/dhcpd.leases~ && /etc/init.d/dhcpd restart &
	[ -f /etc/init.d/kickout_sh ] && /etc/init.d/kickout_sh restart
	[ -f /etc/init.d/remote ] && /etc/init.d/remote restart
	[ -f /etc/init.d/wifidog ] && /etc/init.d/wifidog restart
	[ -f /etc/init.d/airprobectrl ] && /etc/init.d/airprobectrl restart
	quit_network_queue 15
}

restart() {
	add_network_queque network_restart
	[ ! -e $INTEL_MODE_FLAG ] && get_optimum_channel network
	ifdown -a
	[ -e $INTEL_MODE_FLAG ] && update_phy_port
	sleep 1
	trap '' TERM
	stop "$@"
	start "$@"
	[ -e $WTPD_FLAG ] && sleep 5
	[ -e $INTEL_MODE_FLAG ] && /etc/init.d/wireless restart
	quit_network_queue
}

shutdown() {
	ifdown -a
	sleep 1
}
