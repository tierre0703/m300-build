#!/bin/sh /etc/rc.common
# Copyright (C) 2008 OpenWrt.org

START=96

load_led() {
	local name
	local sysfs
	local trigger
	local dev
	local mode
	local default
	local delayon
	local delayoff
	local interval

	config_get sysfs $1 sysfs
	config_get name $1 name "$sysfs"
	config_get trigger $1 trigger "none"
	config_get dev $1 dev
	config_get mode $1 mode "link"
	config_get_bool default $1 default "nil"
	config_get delayon $1 delayon
	config_get delayoff $1 delayoff
	config_get interval $1 interval "50"
	config_get port_state $1 port_state
	config_get delay $1 delay "150"
	config_get message $1 message ""

	if [ "$trigger" = "rssi" ]; then
		# handled by rssileds userspace process
		return
	fi
	[ -e /sys/class/leds/${sysfs}/brightness ] && {
		echo "setting up led ${name}"
		[ "$default" != nil ] && {
			[ $default -eq 1 ] && {
				echo 1 >/sys/class/leds/${sysfs}/brightness
			}
			[ $default -eq 1 ] || {
				echo 0 >/sys/class/leds/${sysfs}/brightness
			}
		}
		echo $trigger > /sys/class/leds/${sysfs}/trigger 2> /dev/null
		[ $? = 0 ] || {
			echo >&2 "Skipping trigger '$trigger' for led '$name' due to missing kernel module"
			return 1
		}
		case "$trigger" in
		"netdev")
			[ -n "$dev" ] && {
				echo $dev > /sys/class/leds/${sysfs}/device_name
				echo $mode > /sys/class/leds/${sysfs}/mode
			}
			;;

		"timer")
			[ -n "$delayon" ] && \
				echo $delayon > /sys/class/leds/${sysfs}/delay_on
			[ -n "$delayoff" ] && \
				echo $delayoff > /sys/class/leds/${sysfs}/delay_off
			;;

		"usbdev")
			[ -n "$dev" ] && {
				echo $dev > /sys/class/leds/${sysfs}/device_name
				echo $interval > /sys/class/leds/${sysfs}/activity_interval
			}
			;;

		"port_state")
			[ -n "$port_state" ] && \
				echo $port_state > /sys/class/leds/${sysfs}/port_state
			;;

		"morse")
			echo $message > /sys/class/leds/${sysfs}/message
			echo $delay > /sys/class/leds/${sysfs}/delay
			;;

		switch[0-9]*)
			local port_mask

			config_get port_mask $1 port_mask
			[ -n "$port_mask" ] && \
				echo $port_mask > /sys/class/leds/${sysfs}/port_mask
			;;
		esac
	}
}

unload_led() {
	local name
	local sysfs
	local trigger

	config_get sysfs $1 sysfs
	config_get name $1 name "$sysfs"
	config_get trigger $1 trigger "none"

	if [ "$trigger" = "rssi" ]; then
		# handled by rssileds userspace process
		return
	fi

	[ -e /sys/class/leds/${sysfs}/brightness ] && {
		echo "setting down led ${name}"
		echo 0 >/sys/class/leds/${sysfs}/brightness
	}
}

load_wireless() {
	local disabled
	config_get_bool disabled $1 disabled "nil"
	board_name=$(cat /tmp/sysinfo/board_name)

	[ "$disabled" != nil ] && {
		[ $disabled -eq 1 ] || {
			case $board_name in
				cf-wr615n)
				echo 1 >/sys/class/leds/comfast:blue:wifi/brightness
				;;
				*)
				echo 1 >/sys/class/leds/comfast:blue:wlan/brightness
				;;
			esac
		}
	}
	
	[ "$disabled" != nil ] || {
			case $board_name in
				cf-wr615n)
				echo 1 >/sys/class/leds/comfast:blue:wifi/brightness
				;;
				*)
				echo 1 >/sys/class/leds/comfast:blue:wlan/brightness
				;;
			esac
	}
	
	
}

start() {
	local led_off=`uci get led.led_off 2>/dev/null`
	local switch_mode

	[ x"$led_off" == "x1" ] && {
		[ -e /bin/repeater_status_ledcrtl ] && {
		     killall repeater_status_ledcrtl 2>/dev/null
		     /bin/repeater_status_ledcrtl &
		}
		return 
	}
	[ -e /tmp/sysinfo/mode_switch ] && {
		switch_mode=`cat /tmp/sysinfo/mode_switch`
		[ x"$switch_mode" == "x1" ] && {
			/bin/button_change_mode &
		}
	}
	[ -e /sys/class/leds/ ] && {
		config_load system
		config_foreach load_led led
		
		config_load wireless
		local radio0_type
		config_get radio0_type radio0 type
		
		[ "$radio0_type" = "qcawifi" ] && {
			config_foreach load_wireless wifi-iface
		}
		
		[ -e /bin/repeater_status_ledcrtl ] && {
		     killall repeater_status_ledcrtl 2>/dev/null
		     /bin/repeater_status_ledcrtl &
		}
		
		[ -e /sys/class/leds/comfast\:blue\:usr ] && killall led_usr && /bin/led_usr &
	}
}

stop() {
	[ -e /sys/class/leds/ ] && {
		config_load system
		config_foreach unload_led led

		[ -e /sys/class/leds/comfast\:blue\:usr ] && killall led_usr
	}
}

restart() {
	stop
	start
}
