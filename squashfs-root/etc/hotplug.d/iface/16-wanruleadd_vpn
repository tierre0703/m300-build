#!/bin/sh

policy_set_iface_route()
{
	rt_tables_iface_exist=`cat /etc/iproute2/rt_tables | grep -w ${rt_interface}`
	if [ -z "$rt_tables_iface_exist" ];then
		iface_metric=`uci get network.${INTERFACE}.metric 2>/dev/null`
		if [ -z "$iface_metric" ] || [ "$iface_metric" == "" ] || [ "$iface_metric" == "0" ];then
			exit 0
		fi
		echo "${iface_metric} ${rt_interface}" >> /etc/iproute2/rt_tables
	fi
	$IP route flush table ${rt_interface}
	if [ $ACTION == "ifup" ]; then
		route_args=$($IP route list dev $DEVICE default | head -1 | sed '/.*via \([^ ]*\) .*$/!d;s//via \1/;q' | egrep '[0-9]{1,3}(\.[0-9]{1,3}){3}')
		route_args="$route_args dev $DEVICE"
		$IP route add table ${rt_interface} default $route_args
	fi
}

policy_iface_default()
{
	rule_existed=`ip rule list |grep -w ${rt_interface} |wc -l`          
	if [ $rule_existed -ne 0 ];then
		ip rule list |grep -w ${rt_interface}|awk '{print $5}' > /tmp/iplist_vpn
		cat /tmp/iplist_vpn | while read myip
		do                                     
			ip rule del to $myip table ${rt_interface}
		done
		rm /tmp/iplist_vpn
	fi
}

policy_route_ifupdown()
{
	defaultroute=`uci get common.${INTERFACE}.defaultroute 2>/dev/null`
	if [ -n "$defaultroute" ] && [ "$defaultroute" == "1" ];then
		policy_iface_default
		exit 0
	fi
	
	policy_set_iface_route
	isptype=`uci get common.${INTERFACE}.isptype 2>/dev/null`
	if [ -z "$isptype" ];then
		exit 0
	fi
	isp_prefix="/etc/mwanisp/"
	isp_file=${isp_prefix}${isptype}
	
	if [ ! -f ${isp_file} ];then
		exit 0
	fi
	if [ $ACTION == "ifdown" ];then
		policy_iface_default
	else
		rule_existed=`ip rule list |grep -w ${rt_interface} |wc -l`
		if [ $rule_existed -eq 0 ];then
			cat ${isp_file} | while read myip
			do
					ip rule add to $myip table ${rt_interface}
			done
		fi

	fi
	

}


if [ $INTERFACE == "pptp" ] || [ $INTERFACE == "l2tp" ];then
	[ -x /usr/sbin/ip ] || exit 1
	local IP rt_interface counter
	IP="/usr/sbin/ip -4"
	rt_interface=rt_${INTERFACE}
	counter=0
	# policy enable:continue,disable:exit. 

	enable_policy=`uci get common.policy.enable 2>/dev/null`
	policy_line_enable=`uci get common.${INTERFACE}.policy_line_enable 2>/dev/null`
	if [ -z $enable_policy ] || [ $enable_policy -eq 0 ] || [ -z $policy_line_enable ] || [ $policy_line_enable -eq 0 ] ;then
		policy_iface_default
		exit 0
	fi

	if [ $ACTION == "ifup" ]; then
		[ -n "$DEVICE" ] || exit 0
		while [ -z "$($IP route list dev $DEVICE default | head -1)" -a "$counter" -lt 10 ]; do
			sleep 1
			let counter++
			if [ "$counter" -ge 10 ]; then
				$LOG warn "Could not find gateway for interface $INTERFACE ($DEVICE)" && return 0
			fi
		done
	fi
	while [ "$(pgrep -f -o hotplug-call)" -ne $$ -a "$counter" -lt 60 ]; do
		sleep 1
		let counter++
		if [ "$counter" -ge 60 ]; then
			$LOG warn "Timeout waiting for older hotplug processes to finish. $ACTION interface $INTERFACE (${DEVICE:-unknown}) aborted" && return 0
		fi
	done
	case "$ACTION" in
		ifup|ifdown)
			policy_route_ifupdown
		;;
	esac

fi
exit 0
