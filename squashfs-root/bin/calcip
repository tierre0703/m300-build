#!/bin/sh
calcnum()
{
awk -f - $* <<EOF
function bitcount(c) {
	c=and(rshift(c, 1),0x55555555)+and(c,0x55555555)
	c=and(rshift(c, 2),0x33333333)+and(c,0x33333333)
	c=and(rshift(c, 4),0x0f0f0f0f)+and(c,0x0f0f0f0f)
	c=and(rshift(c, 8),0x00ff00ff)+and(c,0x00ff00ff)
	c=and(rshift(c,16),0x0000ffff)+and(c,0x0000ffff)
	return c
}

function ip2int(ip) {
	for (ret=0,n=split(ip,a,"\."),x=1;x<=n;x++) ret=or(lshift(ret,8),a[x])
	return ret
}

function int2ip(ip,ret,x) {
	ret=and(ip,255)
	ip=rshift(ip,8)
	for(;x<3;ret=and(ip,255)"."ret,ip=rshift(ip,8),x++);
	return ret
}

function compl32(v) {
	ret=xor(v, 0xffffffff)
	return ret
}

BEGIN {
	start=ip2int(ARGV[1])
	end=ip2int(ARGV[2])
	dotpos=index(ARGV[3],".")
	if (dotpos == 0)
		netmask=compl32(2**(32-int(ARGV[3]))-1)
	else
		netmask=ip2int(ARGV[3])

	network=and(start,netmask)

	network_end=and(end,netmask)
	if (ip2int(network)!=ip2int(network_end)) {
		num=0
	} else {
		limit=or(network,compl32(netmask))-1
		if (end>limit) end=limit
		num=end-start
	}
	print num
}
EOF
}

convertiptoint()
{
awk -f - $* <<EOF
function ip2int(ip) {
	for (ret=0,n=split(ip,a,"\."),x=1;x<=n;x++) ret=or(lshift(ret,8),a[x])
	return ret
}
BEGIN {
	ipaddrnum=ip2int(ARGV[1])
	print ipaddrnum
}
EOF
}

convertinttoip()
{
awk -f - $* <<EOF
function int2ip(ip,ret,x) {
	ret=and(ip,255)
	ip=rshift(ip,8)
	for(;x<3;ret=and(ip,255)"."ret,ip=rshift(ip,8),x++);
	return ret
}
BEGIN {
	ipaddr=int2ip(ARGV[1])
	print ipaddr
}
EOF
}

judgenetwork()
{
awk -f - $* <<EOF
function ip2int(ip) {
	for (ret=0,n=split(ip,a,"\."),x=1;x<=n;x++) ret=or(lshift(ret,8),a[x])
	return ret
}

BEGIN {
	start=ip2int(ARGV[1])
	end=ip2int(ARGV[2])
	dotpos=index(ARGV[3],".")
	if (dotpos == 0)
		netmask=compl32(2**(32-int(ARGV[3]))-1)
	else
		netmask=ip2int(ARGV[3])

	network=and(start,netmask)
	network_end=and(end,netmask)
	if (ip2int(network)!=ip2int(network_end))
		print "0"
	else
		print "1"
}
EOF
}

case $1 in
	"count")
	calcnum $2 $3 $4
	;;
	"iptoint")
	convertiptoint $2
	;;
	"inttoip")
	convertinttoip $2
	;;
	"judge")
	judgenetwork $2 $3 $4
	;;
esac


