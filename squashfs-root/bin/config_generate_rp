#!/bin/sh

CFG=/etc/board.json

. /usr/share/libubox/jshn.sh

[ -f $CFG ] || exit 1

generate_ap_ifname_write() {
	local ifname_lan

	ifname_lan=$2
	ifname_wan=$3

	case $1 in
	lan) uci -q batch <<EOF
set network.$1.ifname='$ifname_lan $ifname_wan'
EOF
		;;
	wan) uci -q batch <<EOF
set network.$1.ifname=''
EOF
		;;
	esac
}

generate_static_network() {
	uci -q batch <<EOF
delete network.loopback
set network.loopback='interface'
set network.loopback.ifname='lo'
set network.loopback.proto='static'
set network.loopback.ipaddr='127.0.0.1'
set network.loopback.netmask='255.0.0.0'
delete network.globals
set network.globals='globals'
set network.globals.ula_prefix='auto'
EOF
}

next_vlan=3
generate_network() {
	local vlan
	local lan_ifname_ap
	local vlan_lan_next
	local board_name=$(cat /tmp/sysinfo/board_name)
	local workmode=$(cat /etc/defconfig/$board_name/workmode)
	local ac_mode=$(cat /tmp/sysinfo/ac_mode)
	local board_type
	board_type=`cat /tmp/sysinfo/detect_wan_by_port | grep type | awk -F "=" '{print $2}'`

	json_select network
	json_select $1
	json_get_vars ifname create_vlan macaddr
	json_select ..
	json_select ..

	[ -n "$ifname" ] || return
	if [ "$create_vlan" -eq 1 ];then
		if [ -n "$board_type" ] && [ "$board_type" == "ramips_mt7621" ];then
			case $1 in
			lan) vlan=2
			ifname="${ifname}.${vlan} ${ifname}.$((vlan + 1)) ${ifname}.$((vlan + 2)) ${ifname}.$((vlan + 3))";;
			wan) vlan=1
			vlan_lan_next=$((vlan + 1))
			ifname=${ifname}.${vlan};;
			*)
				vlan=$next_vlan
				next_vlan=$((next_vlan + 1))
				ifname=${ifname}.${vlan}
				;;
			esac
		else
			case $1 in
			lan) vlan=1
			vlan_lan_next=$((vlan + 1));;
			wan) vlan=2;;
			*)
				vlan=$next_vlan
				next_vlan=$((next_vlan + 1))
				;;
			esac
			[ -n "$vlan" ] && lan_ifname_ap=${ifname}.${vlan_lan_next} && ifname=${ifname}.${vlan}
		fi
	fi


	[ -n "$vlan" ] && lan_ifname_ap=${ifname}.${vlan_lan_next}

	uci -q batch <<EOF
delete network.$1
set network.$1='interface'
set network.$1.ifname='$ifname'
set network.$1.proto='none'
set network.$1.macaddr='$macaddr'
EOF

	case $workmode in
	ap)
		generate_ap_ifname_write $1 $ifname $lan_ifname_ap
		;;
	esac

	case $1 in
	lan)
	if [ -n "$ac_mode" ];then
		uci -q batch <<EOF
set network.$1.type='bridge'
set network.$1.force_link=1
set network.$1.proto='static'
set network.$1.ipaddr='172.16.0.1'
set network.$1.netmask='255.255.0.0'
set network.$1.ip6assign='60'
set network.def='def'
set network.def.def_lan='$ifname'
EOF
	else
		uci -q batch <<EOF
set network.$1.type='bridge'
set network.$1.force_link=1
set network.$1.proto='static'
set network.$1.ipaddr='192.168.10.1'
set network.$1.netmask='255.255.255.0'
set network.$1.ip6assign='60'
set network.def_lan='$ifname'
EOF
	fi

		;;
	wan)
	if [ -n "$ac_mode" ];then
		uci -q batch <<EOF
set network.$1.type='bridge'
set network.$1.metric='10'
set network.$1.defmetric='10'
EOF
	fi
	uci -q batch <<EOF
set network.$1.proto='dhcp'
delete network.wan6
set network.def_wan='$ifname'
EOF
		;;
	esac

	case $workmode in
	ap)
		uci -q batch <<EOF
set network.workmode='ap'
EOF
		;;
	router)
		uci batch <<EOF
set network.workmode='router'
EOF
		;;
	wisp)
		uci batch <<EOF
set network.lan.ifname='eth0.1 eth0.2'
set network.workmode='wisp'
EOF
		;;
	esac
}

generate_switch_vlan() {
	local device=$1
	local vlan=$2
	local cpu_port=$3

	case $vlan in
	lan)	vlan=1;;
	wan)	vlan=2;;
	*)	vlan=${vlan##vlan};;
	esac

	json_select vlans
	json_select $2
	json_get_values ports
	json_select ..
	json_select ..

	uci -q batch <<EOF
add network switch_vlan
set network.@switch_vlan[-1].device='$device'
set network.@switch_vlan[-1].vlan='$vlan'
set network.@switch_vlan[-1].ports='$ports ${cpu_port}t'
EOF
}

generate_switch() {
	local key=$1
	local vlans

	json_select switch
	json_select $key
	json_get_vars enable reset blinkrate cpu_port

	[ -n "$cpu_port" ] || return

	uci -q batch <<EOF
add network switch
set network.@switch[-1].name='$key'
set network.@switch[-1].reset='$reset'
set network.@switch[-1].enable_vlan='$enable'
set network.@switch[-1].blinkrate='$blinkrate'
EOF

	json_get_keys vlans vlans
	for vlan in $vlans; do generate_switch_vlan $1 $vlan $cpu_port; done
	json_select ..
	json_select ..
}

generate_led() {
	local key=$1
	local cfg="led_$key"

	json_select led
	json_select $key
	json_get_vars name sysfs type trigger device interface default port_mask
	json_select ..
	json_select ..

	uci -q batch <<EOF
delete system.$cfg
set system.$cfg='led'
set system.$cfg.name='$name'
set system.$cfg.sysfs='$sysfs'
set system.$cfg.dev='$device'
set system.$cfg.trigger='$trigger'
set system.$cfg.port_mask='$port_mask'
set system.$cfg.default='$default'
EOF
	case $type in
	netdev)
		uci -q batch <<EOF
set system.$cfg.trigger='netdev'
set system.$cfg.mode='link tx rx'
EOF
	;;

	usb)
		uci -q batch <<EOF
set system.$cfg.trigger='usbdev'
set system.$cfg.interval='50'
EOF
	;;

	esac

	local board_name=$(cat /tmp/sysinfo/board_name)
	local led_mode=$(cat /etc/defconfig/$board_name/led_mode)

	case $led_mode in
	only_wireless)

		uci batch <<EOF
set system.$cfg.mode='link'
EOF
		;;
	esac

	case $1 in
	WAN | \
	LAN | \
	wan | \
	lan)
	;;

	*)
		uci batch <<EOF
		set system.$cfg.mode='link tx rx'
EOF
	;;
	esac
}

generate_macaddr() {
	json_select network
	json_select lan
	json_get_vars def_lan_macaddr def_wan_macaddr def_wlan0_macaddr def_sta_macaddr
	json_select ..
	json_select ..

	uci -q batch <<EOF
set network.def_lan_macaddr='$def_lan_macaddr'
set network.def_wan_macaddr='$def_wan_macaddr'
set network.def_wlan0_macaddr='$def_wlan0_macaddr'
set network.def_sta_macaddr='$def_sta_macaddr'
EOF
}
json_init
json_load "$(cat ${CFG})"

generate_static_network
json_get_keys keys network
for key in $keys; do generate_network $key; done

json_get_keys keys switch
for key in $keys; do generate_switch $key; done

json_get_keys keys led
for key in $keys; do generate_led $key; done

generate_macaddr

uci commit
