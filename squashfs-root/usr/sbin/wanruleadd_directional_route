#!/bin/sh

local table_id_start=200
local dir_routing_list

policy_set_iface_route()
{
	rt_tables_iface_exist=`cat /etc/iproute2/rt_tables | grep -w ${rt_interface}`
	if [ -z "$rt_tables_iface_exist" ];then
		iface_metric=`uci get network.${interface}.metric 2>/dev/null`
		if [ -z "$iface_metric" ] || [ "$iface_metric" == "" ] || [ "$iface_metric" == "0" ];then
			exit 0
		fi
		echo "$(($table_id_start+$iface_metric)) ${rt_interface}" >> /etc/iproute2/rt_tables
	fi
	$IP route flush table ${rt_interface}
	route_args=$($IP route list dev $device default | head -1 | sed '/.*via \([^ ]*\) .*$/!d;s//via \1/;q' | egrep '[0-9]{1,3}(\.[0-9]{1,3}){3}')
	[ x"$route_args" = "x" ] && exit 0
	route_args="$route_args dev $device"
	$IP route add table ${rt_interface} default $route_args
}

flush_interface_ip_rule()
{
	rule_existed=`ip rule list |grep -w ${rt_interface} | grep rt_wan | wc -l`
	if [ $rule_existed -ne 0 ];then
		ip rule list | grep -v to |grep -w ${rt_interface}|awk '{print $3}' > /tmp/iplist
		cat /tmp/iplist | while read myip
		do
			ip rule del from $myip table ${rt_interface} 2>/dev/null
		done
		rm /tmp/iplist
	fi

}

directional_route_ifupdown()
{
	rule_exist=`uci show common|grep common.dir_routing |grep -w "$interface"`
	[ -z "$rule_exist" ] && exit 0

	policy_set_iface_route

	for cfg in $dir_routing_list ; do
		iface=`uci get common.dir_routing$cfg.iface 2>/dev/null`
		[ $iface != $interface ] && continue
		ip=`uci get common.dir_routing$cfg.ipaddr 2>/dev/null`

		res=`echo $ip | grep '-'`
		if [ -n "$res" ];then
			ip_start=`echo $ip | awk -F "-" '{print $1}'`
			ip_end=`echo $ip | awk -F "-" '{print $2}'`
		else
			ip_start=$ip
			ip_end=$ip
		fi
		for index in $(seq 0 4) ; do
			if [ "$index" == "0" ] ; then
				ipaddr=`uci get network.lan.ipaddr 2>/dev/null`
				netmask=`uci get network.lan.netmask 2>/dev/null`
			else
				ipaddr=`uci get network.lan$index.ipaddr 2>/dev/null`
				netmask=`uci get network.lan$index.netmask 2>/dev/null`
			fi
			[ -z $ipaddr ] && continue
			res=`/bin/calcip "judge" $ip_start $ipaddr $netmask`
			if [ "$res" == "0" ];then
				continue
			fi
			res=`/bin/calcip "count" $ip_start $ip_end $netmask`
			let count=$res
			startnum=`/bin/calcip "iptoint" $ip_start`
			i=0
			while [ $i -le $count ]
			do
				let realnum=startnum+$i
				realip=`/bin/calcip "inttoip" $realnum`
				if [ "$realip" == "$ipaddr" ];then
					let i=i+1
					continue
				fi
				rule_existed=`ip rule list | grep $realip | grep ${rt_interface} | wc -l`
				[ $rule_existed -eq 0 ] && {
					ip rule add from $realip table ${rt_interface} pref 0
				}
				let i=i+1
			done
		done
	done
}


if [ $# -eq "2" ] && [ $2 == "ifdown" ];then
	interface=$1
	action=$2
elif [ $# -eq "3" ];then
	interface=$1
	device=$2
	action=$3
else
	echo "parameter error"
	exit 0
fi

[ -x /usr/sbin/ip ] || exit 1
local IP rt_interface
IP="/usr/sbin/ip -4"
rt_interface=rt_${interface}

if [ $action == "ifup" ]; then
	[ -n "$device" ] || exit 0
fi

dir_routing_list=`uci get common.dir_routing_list.list 2>/dev/null`
dir_routing_list=${dir_routing_list#*','}
dir_routing_list=`echo $dir_routing_list | sed 's/[,]*/ /g'`
[ -z $dir_routing_list ] && exit 0

case "$action" in
	ifup)
		directional_route_ifupdown
	;;
	ifdown)
		flush_interface_ip_rule
	;;
	*)
		exit 0
	;;
esac

exit 0
