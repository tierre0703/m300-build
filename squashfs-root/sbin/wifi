#!/bin/sh
# Copyright (C) 2006 OpenWrt.org

. /lib/functions.sh
. /usr/share/libubox/jshn.sh
. /etc/diag.sh
. /lib/network_queue.sh

local radio_58g=""
local radio_58g_state=""
local wifi_restart_flag

#[ ! -f /lib/wifi/mac80211.sh ] && exit 0

usage() {
	cat <<EOF
Usage: $0 [down|detect|reload|status|user]
enables (default), disables or detects a wifi configuration.
EOF
	exit 1
}

ubus_wifi_cmd() {
	local cmd="$1"
	local dev="$2"

	json_init
	[ -n "$2" ] && json_add_string device "$2"
	ubus call network.wireless "$1" "$(json_dump)"
}

find_net_config() {(
	local vif="$1"
	local cfg
	local ifname

	config_get cfg "$vif" network

	[ -z "$cfg" ] && {
		include /lib/network
		scan_interfaces

		config_get ifname "$vif" ifname

		cfg="$(find_config "$ifname")"
	}
	[ -z "$cfg" ] && return 0
	echo "$cfg"
)}


bridge_interface() {(
	local cfg="$1"
	[ -z "$cfg" ] && return 0

	include /lib/network
	scan_interfaces

	for cfg in $cfg; do
		config_get iftype "$cfg" type
		[ "$iftype" = bridge ] && config_get "$cfg" ifname
		prepare_interface_bridge "$cfg"
		return $?
	done
)}

prepare_key_wep() {
	local key="$1"
	local hex=1

	echo -n "$key" | grep -qE "[^a-fA-F0-9]" && hex=0
	[ "${#key}" -eq 10 -a $hex -eq 1 ] || \
	[ "${#key}" -eq 26 -a $hex -eq 1 ] || {
		[ "${key:0:2}" = "s:" ] && key="${key#s:}"
		key="$(echo -n "$key" | hexdump -ve '1/1 "%02x" ""')"
	}
	echo "$key"
}

wifi_fixup_hwmode() {
	local device="$1"
	local default="$2"
	local hwmode hwmode_11n

	config_get channel "$device" channel
	config_get hwmode "$device" hwmode
	case "$hwmode" in
		11bg) hwmode=bg;;
		11a) hwmode=a;;
		11b) hwmode=b;;
		11g) hwmode=g;;
		11n*)
			hwmode_11n="${hwmode##11n}"
			case "$hwmode_11n" in
				a|g) ;;
				default) hwmode_11n="$default"
			esac
			config_set "$device" hwmode_11n "$hwmode_11n"
		;;
		*)
			hwmode=
			if [ "${channel:-0}" -gt 0 ]; then
				if [ "${channel:-0}" -gt 14 ]; then
					hwmode=a
				else
					hwmode=g
				fi
			else
				hwmode="$default"
			fi
		;;
	esac
	config_set "$device" hwmode "$hwmode"
}

_wifi_updown() {
	for device in ${2:-$DEVICES}; do (
		config_get disabled "$device" disabled
		[ "$disabled" = "1" ] && {
			echo "'$device' is disabled"
			set disable
		}
		config_get iftype "$device" type
		if eval "type ${1}_$iftype" 2>/dev/null >/dev/null; then
			eval "scan_$iftype '$device'"
			eval "${1}_$iftype '$device'" || echo "$device($iftype): ${1} failed"
		elif [ ! -f /lib/netifd/wireless/$iftype.sh ]; then
			echo "$device($iftype): Interface type not supported"
		fi
	); done
}

radio_get() {
	local hwmode
	local result
	
	config_get hwmode $1 hwmode
	result=`echo "$hwmode" | grep 11a`
	if [ "$result" != "" ];then
		radio_58g=$1
	fi
}

iface_get() {
	local device
	local disabled
	local ssid

	if [ x"$radio_58g_state" = "x1" ];then
		return;
	fi
	config_get device $1 device

	if [ -n "$radio_58g" ] && [ -n "$device" ] && [ "$device" = "$radio_58g" ];then
		config_get disabled $1 disabled
		if [ x"$disabled" = "x1" ];then
			return;
		fi

		config_get ssid $1 ssid
		if [ x"$ssid" = "x" ];then
			return;
		fi
		radio_58g_state="1"
	fi
}

lamp_58g_led() {
	config_load "${cfgfile:-wireless}"
	config_foreach radio_get wifi-device
	if [ -n "$radio_58g" ];then
		config_foreach iface_get wifi-iface
	fi

	if [ x"$radio_58g_state" = "x1" ];then
		echo 1 > /sys/class/leds/comfast\:blue\:58g/brightness
	else
		echo 0 > /sys/class/leds/comfast\:blue\:58g/brightness
	fi
}

wifi_updown() {
	cmd=down
	[ enable = "$1" ] && {
		_wifi_updown disable "$2"
		ubus_wifi_cmd "$cmd" "$2"
		scan_wifi
		[ -f /sys/class/leds/comfast\:blue\:58g/brightness ] && echo 0 >/sys/class/leds/comfast\:blue\:58g/brightness
		cmd=up
	}
	ubus_wifi_cmd "$cmd" "$2"
	_wifi_updown "$@"
}

wifi_reload_legacy() {
	_wifi_updown "disable" "$1"
	scan_wifi
	_wifi_updown "enable" "$1"
}

wifi_reload() {
	ubus call network reload
	if [ -n "$wifi_restart_flag" ];then
		wifi_updown "enable" "$2"
	else
		wifi_reload_legacy
	fi
}

wifi_detect() {
	for driver in ${2:-$DRIVERS}; do (
		if eval "type detect_$driver" 2>/dev/null >/dev/null; then
			eval "detect_$driver" || echo "$driver: Detect failed" >&2
		else
			echo "$driver: Hardware detection not supported" >&2
		fi
	); done
}

start_net() {(
	local iface="$1"
	local config="$2"
	local vifmac="$3"

	[ -f "/var/run/$iface.pid" ] && kill "$(cat /var/run/${iface}.pid)" 2>/dev/null
	[ -z "$config" ] || {
		include /lib/network
		scan_interfaces
		for config in $config; do
			setup_interface "$iface" "$config" "" "$vifmac"
		done
	}
)}

set_wifi_up() {
	local cfg="$1"
	local ifname="$2"
	uci_set_state wireless "$cfg" up 1
	uci_set_state wireless "$cfg" ifname "$ifname"
}

set_wifi_down() {
	local cfg="$1"
	local vifs vif vifstr

	[ -f "/var/run/wifi-${cfg}.pid" ] &&
		kill "$(cat "/var/run/wifi-${cfg}.pid")" 2>/dev/null
	uci_revert_state wireless "$cfg"
	config_get vifs "$cfg" vifs
	for vif in $vifs; do
		uci_revert_state wireless "$vif"
	done
}

scan_wifi() {
	local cfgfile="$1"
	DEVICES=
	config_cb() {
		local type="$1"
		local section="$2"

		# section start
		case "$type" in
			wifi-device)
				append DEVICES "$section"
				config_set "$section" vifs ""
				config_set "$section" ht_capab ""
			;;
		esac

		# section end
		config_get TYPE "$CONFIG_SECTION" TYPE
		case "$TYPE" in
			wifi-iface)
				config_get device "$CONFIG_SECTION" device
				config_get vifs "$device" vifs
				append vifs "$CONFIG_SECTION"
				config_set "$device" vifs "$vifs"
			;;
		esac
	}
	config_load "${cfgfile:-wireless}"
}

wifi_user() {
	wifi_user_led=$(cat /tmp/sysinfo/wifi_user_led 2>/dev/null)

	if [ "${wifi_user_led}" = "1" ]; then
		break
	else
		return
	fi

	while [ 1 ]; do
		assoclist=$(iwinfo wlan0 assoclist | grep 'No station connected')		
		if [ "${assoclist}" = "No station connected" ]; then
			set_user_state off
		else
			set_user_state on
		fi
		sleep 1
	done;
}

disauth_config() {
	local auth_enable
	local auth_enable_old
	local level
	local level_apple
	local level_old
	disauth_enable=`uci get wireless.disauth.enable 2>/dev/null`
	auth_enable_old=`cat /etc/signal/enable 2>/dev/null`
	level_old=`cat /etc/signal/level 2>/dev/null`
	if [ -z "$disauth_enable" ] || [ "$disauth_enable" == "0" ];then
		auth_enable=0
	else
		auth_enable=1

		local auth_data=`cat /tmp/sysinfo/level_auth`
		level_1=`echo "$auth_data" | awk '{print $1}'`
		level_5=`echo "$auth_data" | awk '{print $2}'`
		level_10=`echo "$auth_data" | awk '{print $3}'`
		level_apple_1=`echo "$auth_data" | awk '{print $4}'`
		level_apple_5=`echo "$auth_data" | awk '{print $5}'`
		level_apple_10=`echo "$auth_data" | awk '{print $6}'`

		disauth_range=`uci get wireless.disauth.range`
		case "$disauth_range" in
			1 |\
			5 |\
			10 )
				level=`eval echo '$'level_$disauth_range`
				level_apple=`eval echo '$'level_apple_$disauth_range`
				;;
			*)
				disauth_range="1"
				level=`eval echo '$'level_$disauth_range`
				level_apple=`eval echo '$'level_apple_$disauth_range`
				;;

		esac

		if [ "$level_old" != "$level" ];then
			wifi_restart_flag=1
		fi
		echo $level > /etc/signal/level
		echo $level_apple > /etc/signal/level_apple
	fi
	if [ "$auth_enable_old" != "$auth_enable" ];then
		wifi_restart_flag=1
	fi
	echo $auth_enable > /etc/signal/enable
}

mt_ifname_disabled_get()
{
	local ifname
	local disabled
	config_get ifname $1 ifname
	config_get disabled $1 disabled

	if [[ "$ifname" != "wlan0"  && "$ifname" != "wlan8" ]] ;then
		return;
	fi

	if [[ "$disabled" = "1" ]]; then
		ifconfig $ifname down
	else
		ifconfig $ifname up
	fi
}

mt_wifi_down_up()
{
	config_load "${cfgfile:-wireless}"
	config_foreach mt_ifname_disabled_get wifi-iface
}

DEVICES=
DRIVERS=
include /lib/wifi

add_network_queque

[ -e "/tmp/channel_select" ] && get_optimum_channel

scan_wifi
[ -e "/tmp/signal" ] && disauth_config

case "$1" in
	down) 
		wifi_updown "disable" "$2"
		wait_times=2
	;;
	detect) wifi_detect "$2";;
	status) ubus_wifi_cmd "status" "$2";;
	reload) 
		wifi_reload "$2"
		wait_times=10
	;;
	reload_legacy) 
		wifi_reload_legacy "$2"
		wait_times=10
	;;
	user) wifi_user;;
	--help|help) usage;;
	*) 
		ubus call network reload; wifi_updown "enable" "$2"
		wait_times=10
	;;
esac
[ -f /sys/class/leds/comfast\:blue\:58g/brightness ] && lamp_58g_led

[ -e "/tmp/sysinfo/mt7615e" ] && mt_wifi_down_up

quit_network_queue $wait_times
